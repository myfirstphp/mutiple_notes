如何查看laravel门脸类包含方法的源码
https://www.cnblogs.com/itbsl/p/10813018.html

----PDO  PHP Data Objects的缩写，PHP 数据对象 （PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口；主要用来防止sql注入的，laravel
的查询构造器就是使用的PDO
----Laravel Scaffold Generator   代码生成器，能让你通过执行一条 Artisan 命令，完成注册路由、新建模型、新建表单验证类、新建资源控制器以及所需视图文件等任务，不仅约束了项目开发的风格，还能极大地提高我们的开发效率
----faker用来造假数据的
https://learnku.com/courses/laravel-essential-training/7.x/list-all-user/8411
----contract Laravel 的契约就是php的接口只不过叫法不一样，它们由框架提供并定义了核心服务。 例如，Illuminate\Contracts\Queue\Queue 契约定义了队列任务需要的方法，而 Illuminate\Contracts\Mail\Mailer 契约定义了发送邮件需要的方法。
每一个契约都有框架提供的相应的实现。例如， Laravel 提供了对多种驱动的队列实现，和一个由 SwiftMailer 驱动的邮件实现。
所有 Laravel 契约都在 它们各自的 GitHub 仓库。这为所有可用的契约以及扩展包开发者们可能用到的单个、解耦的包，提供了一个快速参考入口
----Facades  Facades 为应用程序的 服务容器 中可用的类提供了一个「静态」接口。Laravel 本身附带许多的 facades，甚至你可能在不知情的状况下已经在使用他们！Laravel 「facades」作为在服务容器内基类的「静态代理」，拥有简洁、易表达的语法优点，同时维持着比传统静态方法更高的可测试性和灵活性。我们经常用的Route就是一个Facade, 它是\Illuminate\Support\Facades\Route类的别名，这个Facade类代理的是注册到服务容器里的router服务，所以通过Route类我们就能够方便地使用router服务中提供的各种服务，而其中涉及到的服务解析完全是隐式地由Laravel完成的，这在一定程度上让应用程序代码变的简洁了不少
通俗点讲，一个类使用了Facades之后，就可以静态调用里面的方法了，e.x 有一个ClassName类里面有一个ClassMethod方法，当这个类使用了门面后，就可以静态调用里面的方法了；具体见下面的连接
https://segmentfault.com/a/1190000009171779?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly
----Vagrant是一个基于Ruby的工具,用于创建和部署虚拟化开发环境
----Laravel Homestead 是 Laravel 官方预封装的 Vagrant Box，它为你提供了一个完美的开发环境，让你不需要再本地开发机器上安装 PHP、Web 服务器以及其他的服务器软件
----Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务；和Apache类似，都是web服务器
----Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。
----Eloquent；Laravel 的 Eloquent ORM 提供了一种漂亮简洁的关系映射的模型来与数据库进行交互；Eloquent 是 Laravel 的 'ORM'，即 'Object Relational Mapping'，对象关系映射,Eloquent 让一个 'Model类' 对应一张数据库表，并且在底层封装了很多 'function'，可以让 Model 类非常方便地调用；Eloquent 提供了简洁优雅的 ActiveRecord 实现来跟数据库进行交互。Active Record 是一种领域模型模式；
Eloquent Article 模型默认情况下会使用类的「下划线命名法」与「复数形式名称」来作为数据表的名称生成规则
e.x User 数据模型类对应 users 表；BlogPost 数据模型类对应 blog_posts 表；
Eloquent 将会假设 Article 模型被存储记录在 articles 数据表中。如果你需要指定自己的数据表，则可以通过 table 属性来定义
e.x  protected $table = 'my_articles';
----服务容器是一个用于管理类依赖以及实现依赖注入的强有力工具
----控制反转（IoC）;由外部负责其依赖需求的行为
----DI （依赖注入）;由外部以参数或其他形式注入的依赖，都属于 依赖注入
----vcs  版本控制系统
----Variable handling 函数；https://www.php.net/manual/zh/book.var.php
----final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承;final放在最前面
----extends；继承关键字，如果父类定义方法时使用了 final，则该方法不可被覆盖。但是可以通过 parent::method_name 来访问父类被覆盖的方法或属性。当覆盖方法时，参数必须保持一致否则 PHP 将发出 E_STRICT 级别的错误信息。但构造函数例外，构造函数可在被覆盖时使用不同的参数。
子类可以继承和重写父类的所有成员（除了用关键字final修饰的方法）
----重载（overloaded）：PHP中的重载与其它绝大多数面向对象语言不同。传统的重载是用于提供多个同名的类方法，但各方法的参数类型或者个数不同；php中的重载不常用，想了解的话自行百度
----重写（override）：重写（还可以称为覆盖）就是在子类中将父类的成员方法的名称保留，重写成员方法的实现内容，更改成员方法的存储权限，或是修改成员方法的返回值类型；
当覆盖方法时，参数必须保持一致（也就是指个数一样多）否则 PHP 将发出 E_STRICT 级别的错误信息。但构造函数例外，构造函数可在被覆盖时使用不同的参数
----类常量，const关键字声明类常量，类常量声明和调用都不用$符号；类常量可以被类名或实例对象通过::调用；$this->property（其中 property 是该属性名）这种方式来访问非静态属性。静态属性则是用 ::（双冒号）：self::$property 来访问；静态属性和常量可以通过$this或者self通过::调用，但是常量调用的时候，不要加上$符号，而静态属性要加上$;非静态属性，只能通过$this调用，且不要加上$符号
----命名空间，namespace关键字，最好用一个大括号，所有代码都必须放到命名空间的大括号中
----自动加载类spl_autoload_register；当需要使用的类没有被引入时，这个函数会在PHP报错前被触发，未定义的类名会被当作参数传入
----__construct；构造函数关键字；如果子类中定义了构造函数则不会隐式调用其父类的构造函数。要执行父类的构造函数，需要在子类的构造函数中调用 parent::__construct()
----当构造器参数带访问控制（visibility modifier）时，PHP 会同时把它当作对象属性和构造器参数， 并赋值到属性；放在构造器提升参数里的属性会同时复制为属性和参数。
----?int 定义为 int 或 NULL
----返回类型声明,就是在函数后面加上冒号再加上一个空格再加上数据类型，e.g. final function foo(----arguments): static(----code)
----Static 创造方法;   在new static()中，static 关键词会被翻译成代码所在类的类名
----析构函数，和构造函数类似，析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。关键字__destruct;PHP页面加载完毕之后；unset()类；变量引用指向别的对象或值时,都会把对象的引用销毁，对没有任何引用的对象，系统会进行销毁回收
----范围解析操作符（也可称作 Paamayim Nekudotayim）或者更简单地说是一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。静态属性不可以由对象通过 -> 操作符来访问,静态方法可以；静态属性和静态方法都能通过一个类已实例化的对象来访问。
----self表示此类本省，parent表示此类的父类；
----abstract，定义抽象类，方法的关键字
----interface，接口关键字；类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。接口也可以继承，通过使用 extends 操作符
接口中的常量不能被子类或子接口所覆盖
----trait,php从以前到现在一直都是单继承的语言，无法同时从两个基类中继承属性和方法，为了解决这个问题，php出了Trait这个特性;通过在类中使用use 关键字，声明要组合的Trait名称，具体的Trait的声明使用Trait关键词，Trait不能实例化;Trait中的方法会覆盖 基类中的同名方法，而本类会覆盖Trait中同名方法
----匿名类;用法和匿名函数差不多
----魔术方法，所有的魔术方法 必须 声明为 public；PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。
----clone，对象复制关键字；当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。
----对象比较，当使用比较运算符（==）比较两个对象变量时，比较的原则是：如果两个对象的属性和属性值 都相等，而且两个对象是同一个类的实例，那么这两个对象变量相等；而如果使用全等运算符（===），这两个对象变量一定要指向某个类的同一个实例（即同一个对象）

----序列化对象；序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。
----instanceof 用于确定一个 PHP 变量是否属于某一个类或其父类或其实现的接口或相同类的对象  的实例：
----Closure 类：用于代表 匿名函数 的类.
----__callStatic；当调用不存在的静态方法时，会调用这个函数
----implements，接口关键字；类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。接口也可以继承，通过使用 extends 操作符
----Tinker 是一个 REPL (read-eval-print-loop)，REPL 指的是一个简单的、可交互式的编程环境;php artisan tinker这个命令来进入tinker环境
----路由的resource 方法将遵从 RESTful 架构为用户资源生成路由。该方法接收两个参数，第一个参数为资源名称，第二个参数为控制器名称
注意：这个环境下要用反斜杠，斜杠会报错
----Gravatar 为 “全球通用头像”，当你在 Gravatar 的服务器上放置了自己的头像后，可通过将自己的 Gravatar 登录邮箱进行 MD5 转码，并与 Gravatar 的 URL 进行拼接来获取到自己的 Gravatar 头像
----DRY（Don’t repeat yourself）原则
----Blade 是 Laravel 提供的一个简单而又强大的模板引擎。和其他流行的 PHP 模板引擎不同，Blade 并不限制你在视图中使用原生 PHP 代码
----art tinker 是 Laravel 框架自带的命令，用以调出 Laravel 的交互式运行时
----NPM 是 Node.js 的包管理和任务管理工具，其强大的功能也是 Node.js 能够如此成功的因素之一。在使用 NPM 安装第三方模块（也可理解为扩展包）时，你需要在 package.json 中对要安装的模块指定好名称和版本号,然后运行下面命令进行安装:npm install
----Yarn 是 Facebook 在 2016 年 10 月开源的一个新的包管理器，用于替代现有的 NPM 客户端或者其他兼容 NPM 仓库的包管理工具。Yarn 在保留 NPM 原有工作流特性的基础上，使之变得更快、更安全、更可靠;
当执行 yarn install 命令时，Yarn 会先判断当前文件夹中是否存在 yarn.lock 文件，存在的话会按照文件中特定的包版本进行安装，否则读取  package.json 文件中的内容并发送到服务器上解析，解析成功后把结果写入 yarn.lock 文件中，最后安装扩展包。 Laravel 自带 yarn.lock 文件，此文件的作用与 composer.lock 一致，是为了保证项目依赖代码版本号绝对一致而存在的
yarn add [package]安装指定包
----composer
https://learnku.com/articles/42616
Composer 是 PHP 的一个依赖管理工具。我们可以在项目中声明所依赖的外部工具库，Composer 会帮你安装这些依赖的库文件，有了它，我们就可以很轻松的使用一个命令将其他人的优秀代码引用到我们的项目中来
----Laravel Mix
https://learnku.com/courses/laravel-essential-training/7.x/laravel-front-end-workflow/8380
Laravel Mix 一款前端任务自动化管理工具，使用了工作流的模式对制定好的任务依次执行。Mix 提供了简洁流畅的 API，让你能够为你的 Laravel 应用定义 Webpack 编译任务。Mix 支持许多常见的 CSS 与 JavaScript 预处理器，通过简单的调用，你可以轻松地管理前端资源。我们可以在 webpack.mix.js 文件中制定一些如资源文件的编译、压缩等任务。Laravel 已默认为我们生成了 webpack.mix.js 文件，并集成了 laravel-mix 模块。
----Node.js
简单的说 Node.js 就是运行在服务端的 JavaScript。
Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。
Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。
----RESTful架构：
（1）每一个URI代表一种资源；
（2）客户端和服务器之间，传递这种资源的某种表现层；
（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。

REST四个基本原则：
1.使用HTTP动词：GET POST PUT DELETE；
2.无状态连接，服务器端不应保存过多上下文状态，即每个请求都是独立的；
3.为每个资源设置URI；
4.通过XML JSON进行数据传递；

实现上述原则的架构即可称为RESTFul架构。

1.互联网环境下，任何应用的架构和API可以被快速理解；
2.分布式环境下，任何请求都可以被发送到任意服务器；
3.异构环境下，任何资源的访问和使用方式都统一；
----Guard   下面引用的网上的评论
其实无论是Guard还是Provide，你都可以理解为。某个特定功能的插件。
Laravel是老外的东西，讲究优雅，所以把不同的东西弄成独立而又好看的东西(貌似解释的有语病)
然后还是说说官方这些东西的用法吧。。
Guard，正如这个次的中文含义一样，是守卫的意思，也就是看门的。。
他的作用是处理一个认证，来判断每个请求、调用是否是登录过，或者允许通过的，其实这个中间件也可以实现的。但是，做为一个优雅的框架，自然有优雅的归类了。。
你可以把一个密码登录，创建一个Guard，QQ登录，创建另一个Guard。任何你想要验证的登录形式，或者接口验证什么的，都可以封装成独立的Guard去调用。。

至于provide，不是认证这里的专属，他是Laravel中比较基础核心的东西。官方翻译叫做服务提供者。
他里面只有几个约定好的方法，大致是。运行这个服务的时候执行的boot,和注册这个服务的一些东西的register以及钩子什么的。主要用途就是为框架提供各种服务。
例如你创建了个格式化输出的服务，这个服务执行的时候会把输出的json里面的非字符型的值都转化为字符型。。然后这个服务注册到输出对象下面。叫做ShowMyJSON，然后你就可以在输出的时候直接用了。。

感觉你会听的一头雾水。。。Laravel刚接触确实不好理解。慢慢就好了。就和组装机器人一样。需要啥，就装个啥到某个地方
----JWT 全称 JSON Web Tokens ，是一个非常轻巧的规范。这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。它的两大使用场景是：认证和数据交换
https://learnku.com/articles/10885/full-use-of-jwt

【1】数据库迁移文件在   appName/database/migrations下面

【2】creating 用于监听模型被创建之前的事件，created 用于监听模型被创建之后的事件

【3】{{code}}  表示code是用php代码写的

【4】session  (会话)
由于 HTTP 驱动的应用程序是无状态的，Session 提供了一种在多个请求之间存储有关用户信息的方法，Laravel 通过同一个可读性强的 API 处理各种自带的后台驱动程序。支持诸如比较热门的 Memcached, Redis 和数据库。

【5】邮件发送
在 Laravel 中，可以通过 Mail 接口的 send 方法来进行邮件发送
e.g. 
Mail::send($view, $data, function ($message) use ($from, $name, $to, $subject) {
    $message->from($from, $name)->to($to)->subject($subject);
});

第一个参数是包含邮件消息的视图名称。
第二个参数是要传递给该视图的数据数组。
最后是一个用来接收邮件消息实例的闭包回调，我们可以在该回调中自定义邮件消息的发送者、接收者、邮件主题等信息。

【6】Laravel 应用的所有请求入口都是 public/index.php 文件。而所有的请求都是经由你的 Web 服务器（Apache/Nginx）通过配置引导到这个文件

【7】根据进入应用程序的请求类型来将传入的请求发送到 HTTP 内核或控制台内核。而这两个内核是用来作为所有请求都要通过的中心位置

【8】HTTP 内核继承了 Illuminate\Foundation\Http\Kernel 类，该类定义了一个 bootstrappers 数组。 这个数组中的类在请求被执行前运行，这些 bootstrappers 配置了错误处理，日志，检测应用环境，以及其它在请求被处理前需要执行的任务。

【9】HTTP 内核还定义了所有请求被应用程序处理之前必须经过的 HTTP 中间件。这些中间件处理 HTTP 会话 读写 HTTP session、判断应用是否处于维护模式、验证 CSRF 令牌 等等。

【10】所有应用下的服务提供者均配置到了 config/app.php 配置文件中的 providers 数组中，第一步，所有服务提供者的 register 方法会被调用，然后一旦所有服务提供者均注册后， boot 方法才被调用，
一旦所有服务提供者启动，Request 会被递送给路由。路由将会调度请求，交给绑定的路由或控制器，也当然包括路由绑定的中间件

【11】类依赖和依赖注入；通俗来说，就是你当前操作一个类，但是这个类的某些方法或者功能不是单单只靠这个类就能完成的，而是要借助另一个类的才能完成的。

最直接的标志就是传参数据为对象的时候。

严格来说，你目前操作的是两个类，这两个类之间相互依赖，传参的方式叫注入
【12】$this 在类中叫做伪变量;在静态方法中不可用

【13】一个类的变量才称为属性，常量和函数不属于属性

【14】类成员，包括属性，方法，类常量

【15】 每个HTML 表单中要加上@csrf来防止跨站请求伪造

【16】所有中间件都位于app/Http/Middleware；php artisan make:middleware CheckAge这个命令用来创建新的中间件

【17】include和require的区别：include 结构会发出一条警告，下面的代码还会执行；require会报错，之后的代码不会被执行
e.g.  include 'vars.php';

【18】php中的引用并不像 C 的指针：例如你不能对他们做指针运算，他们并不是实际的内存地址；只是符号表alias

【19】use关键字，导入类或函数或常量然后通过as可以为他们起一个alias
e.g.  use some\namespace\{ClassA, ClassB, ClassC as C};

【20】如果你希望中间件在应用处理每个 HTTP 请求期间运行， 只需要在  app/Http/Kernel.php  中的 $middleware 属性中列出这个中间件

【21】闭包指的是匿名函数

【22】回调函数是一个我们定义的函数，但是不是我们直接来调用，而是通过另一个函数来调用，这个函数通过接收回调函数的名字和参数来实现对它的调用

【23】匿名函数可以赋值给一个变量，然后通过这个变量就可以调用匿名函数

【24】全局空间
如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间，与 PHP 引入命名空间概念前一样。在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此

【25】session的解释
https://blog.csdn.net/weixin_42217767/article/details/92760353

【26】类的初始化
就是指调用类的构造函数

【27】homestead.yaml里面指定的数据库，会在provision的时候就生成了，应用的.env文件里面关于数据库的都是指应用要访问的数据库

【28】当用户在查看一个网页时，一个完整的访问过程如下
1.打开浏览器在地址栏输入 URL 并访问；
2.路由将 URL 请求映射到指定控制器上（也可以是一个匿名函数，不一定非要是控制器）；
3.控制器收到请求，开始进行处理。如果视图需要动态数据进行渲染，则控制器会开始从模型中读取数据；
4.数据读取完毕，将数据传送给视图进行渲染；
5.视图渲染完成，在浏览器上呈现出完整页面；

【29】user模型
模型的创建用php artisan make:model model_name
1.table 属性，来指明要进行数据库交互的数据库表名称
2.fillable属性, 过滤用户提交的字段，只有包含在该属性中的字段才能够被正常更新
3.hidden属性,当我们需要对用户密码或其它敏感信息在用户实例通过数组或 JSON 显示时进行隐藏，就不显示出来

【30】Eloquent模型默认情况下会使用类的「下划线命名法」与「复数形式名称」来作为数据表的名称生成规则
e.g.
Article 数据模型类对应 articles 表；
User 数据模型类对应 users 表；
BlogPost 数据模型类对应 blog_posts 表；

【31】在上面代码中，由于 show() 方法传参时声明了类型 —— Eloquent 模型 User，对应的变量名 $user 会匹配路由片段中的 {user}，这样，Laravel 会自动注入与请求 URI 中传入的 ID 对应的用户模型实例

【32】路由模型绑定
https://learnku.com/docs/laravel/7.x/routing/7458#%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A
1.隐式绑定
需要满足两个条件
(1)路由声明时必须使用 Eloquent 模型的单数小写格式来作为路由片段参数，User 对应 {user}
(2)控制器方法传参中必须包含对应的 Eloquent 模型类型声明，并且是有序的
,这里的有序应该是指传递多个模型参数时,参数顺序应该和控制器里面函数的参数顺序一致
2.显式绑定
要注册显式绑定，请使用路由器的 model 方法为给定参数指定类。您应该在 RouteServiceProvider 类(
路径 \weibo\app\Providers)的 boot 方法中定义显式模型绑定
e.g.

public function boot()
{
    parent::boot();

    Route::model('user', App\User::class);
}
【33】composer create-project laravel/laravel Laravel --prefer-dist "8.*"
这个命令后面的数字指的是版本的意思，7.版本的app,不能用8.版本的vendor文件

【34】php artisan key:generate
https://learnku.com/laravel/t/41250 关于app_key的讲解
在创建应用是系统会自动生成.env文件；里面有自动生成的app_key；
这个命令会生成一个新的app_key，然后替换掉.env文件中的app_key；
如果加上参数--show，则不会替换.env文件中的app_key，仅在命令行上展示出来；开发环境和生产环境应禁止使用相同的APP_KEY

【35】生成ssh_key
ssh-keygen -t rsa -C "your_email@example.com"
然后一路回车就行了，生成的文件默认放在C:\Users\名字下面

【36】eval "$(ssh-agent -s)"
启动ssh-agent程序
ssh-add ~/.ssh/id_rsa  添加ssh_key到代理；只有先启动才能添加

【37】虚拟机初始化时，会将主机的所有 SSH 私钥文件复制到虚拟机的 /home/vagrant/.ssh/ 文件夹中，从而使虚拟机能共享主机上的 SSH 私钥文件;主机上的.ssh文件和虚拟机上的.ssh是在不同的路径，改完主机上的.ssh要vagrant reload --provision一次，让它同步过去

【38】ls –all
显示所有文件，包括隐藏文件

【39】浏览器缓存
现代化的浏览器，会对静态文件进行缓存，静态文件在本课程的范畴内，指的是 .css 、.js 后缀的文件
解决这个问题可以在webpack.mix.js最后加上.version();来解决
然后修改模板，使其动态加载样式代{{ mix('css/app.css') }}
mix 函数用来加载相应的带哈希值的前端资源
注意：webpack.mix.js 文件只在 npm run watch-poll 指令执行时引入，之后指令后台运行不再重新引入。如果你后台运行 watch-poll 命令的话，需关闭 watch-poll 服务（Ctrl + C），再次启动（ npm run watch-poll ）即可生效
version 方法自动在所有编译(指npm run dev命令运行后scss文件编译为css文件)后的文件名后追加唯一的哈希值；
你需要在 views 中使用 Laravel 的全局 mix 函数载入相应的哈希资源，
mix 函数自动判断哈希文件的当前文件名

【40】我们在头部视图的文件名前面加了下划线 _，这样做是为了指定该视图文件为局部视图，为局部视图增加前缀下划线是『约定俗成』

【41】route() 方法由 Laravel 提供，通过传递一个具体的路由名称来返回完整的 URL
https://learnku.com/articles/8207/5-auxiliary-functions-that-make-your-development-easier
可选的第二个参数将会传递给路由的参数，第二个参数只有一个话，可以不用加大括号，有多个要用大括号[]

【42】静态页面和静态文件是不一样的

【43】模型的bcrypt 方法，加密用的
e.x  'password'=>bcrypt('password')

【44】控制器的命名规则
e.x  UsersController   StaticPagesController

【45】表单提交之后用户数据将转由控制器进行处理;在控制器中首先会对用户提交的数据进行验证，验证通过后才能存入数据库

【46】Laravel 为我们提供了 resource 方法来定义用户资源路由
，第一个参数为资源名称，第二个参数为控制器名称
e.x Route::resource('users', 'UsersController')

【47】Laravel辅助函数
https://learnku.com/docs/laravel/8.x/helpers/9393
常用辅助函数
https://learnku.com/articles/8207/5-auxiliary-functions-that-make-your-development-easier

【48】ClassName::class   返回带命名空间的类名

【49】辅助函数old('value', 'default')。重定向用的；第一个参数是对应标签name属性的值，第二个是默认值
Laravel 能够将本次请求的数据保留到下一次，这个特性能实现表单验证失败后，再次返回表单填写页的时候，旧输入数据仍然填充在表单里。如果使用了 Laravel 的本身的验证特性，更是不需要你手动使用下面要说的这些方法了，因为内置的验证功能会自动调用这些方法。

闪存数据到 Session
Illuminate\Http\Request 类的 flash 方法会将当前输入数据闪存到 Session 中，使得在下一次的请求中还能获得这些数据。
在 Blade 模板里面使用这个方法显示数据会更加方便。如果 Session 中闪存的数据里不包含该条，就直接返回 null

【50】validate 方法来进行数据验证；validate 方法接收两个参数，第一个参数为用户的输入数据，第二个参数为该输入数据的验证规则。
返回前端页面输入的内容；e.x   Array ( [email] => 2284624967@qq.com [password] => 1111 )

【51】CSRF 令牌基于会话（Session），过期时间在 config/session.php 文件中的 lifetime 选项做设定，默认为 2 个小时

【52】Laravel 默认会将所有的验证错误信息进行闪存。当检测到错误存在时，Laravel 会自动将这些错误消息绑定到视图上，因此我们可以在所有的视图上使用 errors 变量来显示错误信息。需要注意的是，在我们对 errors 进行使用时，要先使用 count($errors) 检查其值是否为空

【53】Laravel 为消息验证的多语言提供了一种非常简便的方法进行支持。我们可以通过添加一个如 resources/lang/xx/validation.php 语言包，并在语言包的 custom 数组中对翻译语言进行设定。如：
'custom' => [
    'email' => [
        'required' => '邮箱地址不能为空！',
    ],
],
这是非常通用的功能，所以在 GitHub 上有人专门为此写了一个扩展包 - overtrue/laravel-lang 来对 Laravel 提供默认提示信息添加多语言版本翻译
安装命令

composer require "overtrue/laravel-lang:~4.0"
如果上面的命令报错了，就去安装最新版的，
然后设置项目语言为中文
config/app.php文件中'locale' => 'zh_CN'

【54】查看当前使用php版本号
先切换到应用的根目录下
php -i | grep Loaded 'Configuration File'
查看当前memory_limit大小
php -r "echo ini_get('memory_limit').PHP_EOL;"

【55】Illuminate文件夹路径
C:\Users\ysb\Code\weibo2\vendor\laravel\framework\src

【56】通过类名找到类的路径
class a{
    public $a;
    protected $b;
    private $c;
}
$func = new ReflectionClass('a');      //所要查询的类名  
echo    $func->getFileName();

【57】redirect()->route('users.show', [$user]);
注意这里是一个『约定优于配置』的体现，此时 $user 是 User 模型对象的实例。route() 方法会自动获取 Model 的主键，也就是数据表 users 的主键 id，以上代码等同于：
redirect()->route('users.show', [$user->id]);

【58】由于 HTTP 协议是无状态的，所以 Laravel 提供了一种用于临时保存用户数据的方法 - 会话（Session），并附带支持多种会话后端驱动，可通过统一的 API 进行使用。
我们可以使用 session() 方法来访问会话实例。而当我们想存入一条缓存的数据，让它只在下一次的请求内有效时，则可以使用 flash 方法。flash 方法接收两个参数，第一个为会话的键，第二个为会话的值，我们可以通过下面这行代码的为会话赋值

【59】我们在前面新增的路由中，有两个路由的命名完全一致，但由于我们在表单中清楚的指明了使用 POST 动作来提交用户的登录信息，因此 Laravel 会自动将该请求映射到会话控制器的 store 动作上

【60】确认密码的name 必须是这个名字password_confirmation
要不用validate验证confirmed时会报错

【61】借助 Laravel 提供的 Auth 的 attempt 方法可以让我们很方便的完成用户的身份认证操作
if (Auth::attempt(['email' => $email, 'password' => $password])) {
    // 该用户存在于数据库，且邮箱和密码相符合
}
使用 email 字段的值在数据库中查找；
如果用户被找到：
1). 先将传参的 password 值进行哈希加密，然后与数据库中 password 字段中已加密的密码进行匹配；
2). 如果匹配后两个值完全一致，会创建一个『会话』给通过认证的用户。会话在创建的同时，也会种下一个名为 laravel_session 的 HTTP Cookie，以此 Cookie 来记录用户登录状态，最终返回 true；
3). 如果匹配后两个值不一致，则返回 false；
如果用户未找到，则返回 false。
Auth::attempt() 方法可接收两个参数，第一个参数为需要进行用户身份认证的数组，第二个参数为是否为用户开启『记住我』功能的布尔值

【62】laravel中使用back()函数返回原来提交的表单
return redirect()->back();
return back();
这两种方法是没有区别的


【63】使用 withInput() 后模板里 old('email') 将能获取到上一次用户提交的内容

【64】可以看到用户退出登录的按钮实际上是一个表单的提交按钮，在点击退出按钮之后浏览器将向 /logout 地址发送一个 POST 请求。但由于 RESTful 架构中会使用 DELETE 请求来删除一个资源，当用户退出时，实际上相当于删除了用户登录会话的资源，因此这里的退出操作需要使用 DELETE 请求来发送给服务器。由于浏览器不支持发送 DELETE 请求，因此我们需要使用一个隐藏域来伪造 DELETE 请求
<form action="{{ route('logout') }}" method="POST">
  {{ csrf_field() }}
  {{ method_field('DELETE') }}
  <button class="btn btn-block btn-danger" type="submit" name="button">退出</button>
</form>

【63】果我们现在进行登录，则可以看到顶部导航链接已经加上，但当我们尝试点击用户名时，理应弹出的下拉菜单却没有任何响应。这是因为我们还没有引入 Bootstrap 的 JavaScript 组件库。Laravel 5 默认已经在 resources/js/bootstrap.js 文件中为我们配置好了 jQuery 和 Bootstrap。
我们只需要在 app.js 中对其进行加载即可：
resources/js/app.js
require('./bootstrap');
然后启动编译命令npm run dev

【64】redirect 函数返回 重定向 HTTP 响应，如果不带参数调用则返回重定向器实例

【65】在浏览器输入地址，回车,默认是以get方式提交[/b]，只有在ajax提交和form提交指定是post时才以post方式提交
redirect('login')应该也是get方式提交

【66】在 Laravel 的默认配置中，如果用户登录后没有使用『记住我』功能，则登录状态默认只会被记住两个小时。如果使用了『记住我』功能，则登录状态会被延长到五年。我们可以通过使用 Laravel 提供的『记住我』功能来保存一个记忆令牌，用于长时间记录用户登录的状态。Laravel 默认为用户生成的迁移文件中已包含 remember_token 字段，该字段将用于保存『记住我』令牌

【67】表单提交时，$request里面存的数据可能是用input标签里面name属性作为键

【68】<script>一般放在<head>里面

【69】Auth::user() 方法来获取 当前登录用户 的信息

【70】有时，你可能希望在进行字段唯一性验证时忽略指定 ID 。例如， 在「更新个人资料」页面会包含用户名、邮箱和地点。这时你会想要验证更新的 E-mail 值是否唯一。如果用户仅更改了用户名字段而没有改 E-mail 字段，就不需要抛出验证错误，因为此用户已经是这个 E-mail 的拥有者了。
使用 Rule 类定义规则来指示验证器忽略用户的 ID 。这个例子中通过数组来指定验证规则，而不是使用 | 字符来分隔

您永远不应该将任何用户控制的请求输入传递给 ignore 方法。您应该只通过 Eloquent 模型的实例来传递系统生成的唯一 ID，例如自动递增 ID 或 UUID 。否则，您的应用程序将更容易受到 SQL 注入攻击
https://learnku.com/docs/laravel/8.x/validation/9374#rule-unique
ignore（）可以只传一个用户实例（推荐这种方法，因为laravel会自动获取id），也可以是用户实例的id值，这两种传参的方法使用的前提是id是主键
若id不是主键，那么就要加上第二个参数（要忽略的列名），第一个参数是实例id
e.x   Rule::unique('users')->ignore($user->id, 'user_id')

【71】 middleware 方法，该方法接收两个参数，第一个为中间件的名称，第二个为要进行过滤的动作。我们通过 except 方法来设定 指定动作 不使用 Auth 中间件进行过滤，意为 —— 除了此处指定的动作以外，所有其他动作都必须登录用户才能访问，类似于黑名单的过滤机制。相反的还有 only 白名单方法，将只过滤指定动作。我们提倡在控制器 Auth 中间件使用中，首选 except 方法，这样的话，当你新增一个控制器方法时，默认是安全的，此为最佳实践
Laravel 提供的 Auth 中间件在过滤指定动作时，如该用户未通过身份验证（未登录用户），默认将会被重定向到 /login 登录页面

【72】policy放在app/Policies文件夹下


【73】redirect() 实例提供了一个 intended 方法，该方法可将页面重定向到上一次请求尝试访问的页面上，并接收一个默认跳转地址参数，当上一次请求记录为空时，跳转到默认地址上

【74】class_basename 函数返回不带命名空间的特定类的类名

【75】/config/app.php文件
Laravel 在启动的时候会访问上面的文件，然后调用里面的所有服务提供者的 register() 方法，这样我们的服务就被绑定到容器中了
服务提供者要添加到上面文件的providers数组才能被注册
被注册是指调用服务提供者的register方法，此方法会再调用一个绑定方法；
服务提供者还有一个boot方法，该方法在所有服务提供者被注册以后才会被调用

【76】复习总结：
Laravel 提供的三种访问类的方式
依赖注入：通过类型提示的方式实现自动依赖注入

门面：通过代理来访问类

辅助方法：通过方法的方式来访问类
https://segmentfault.com/a/1190000009171779?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly

依赖注入
https://insp.top/article/learn-laravel-container
控制反转

魔术方法：可以理解为比较神奇的方法，这些方法比一般的方法要神奇很多，具体怎么神奇，就看个人理解了
https://segmentfault.com/a/1190000007250604
https://www.php.net/manual/zh/language.oop5.magic.php

反射api：就是通过对象，来获得对象所在类的信息的一组api

中间件的逻辑：每个请求都要经过中间件处理，有两种结果，通过或者不通过，中间件要放在构造函数中

boot方法一般是静态的，__construct函数是用来对类进行初始化用的，boot方法的执行一般在__construct之后

php artisan make:migration create_tatuses_table --create=aaaa
这个命令会创建一个类名为CreateTatusesTable的迁移文件，迁移文件会创建一个名称为aaaa的数据表，不加--create=aaaa，表名默认取的是tatuses

snake case蛇形命名法，就是用下划线e.x file_name
camel case驼峰命名法，就是第一个字母小写，剩下其他单词的第一个字母大写e.x fileNameName2

命名空间都是用的反斜杠

用户认证是指用户是否登录

用户认证就是指通过Auth::attempt()来验证用户传给服务端的数据
已认证用户，就是指通过这个方法返回true的用户
attempt 方法的每个参数是一个关联数组。数组值用于在数据库中查找用户。在上面的例子中，将通过 email 列的值查找用户。如果找到该用户，将用存储在数据库中的哈希密码与数组中的 password 值做比较。不需要对 password 做哈希运算，框架在与数据库中的哈希密码做比较前自动对此值做哈希运算。如果两个哈希值匹配，将为该用户建立验证通过的 session。
如果验证成功， attempt 方法返回 true ，否则返回 false
在attempt方法里面不用再调用Auth::login()；因为attempt通过后会自动建立登录session会话

Auth::login($user);
给一个用户实例创建登录session

redirect 函数返回 重定向 HTTP 响应，如果不带参数调用则返回重定向器实例

请求中放的值的键都是前端name属性中的值

belongsToMany是多对多关联
可以接受四个参数，
第一个是关联模型名，
第二个是中间表别名
第三个是定义关联的所在模型在中间表的外键名
第四个是关联模型在中间表的外键名
这个模型其实不需要中间表，只要逻辑是有三个表就可以
belongsToMany(User::class, 'followers', 'user_id', 'follower_id')

$user->followings和$user->followings()的区别
https://learnku.com/laravel/t/8035/should-there-be-three-tables-for-many-to-many-relationships-how-can-a-users-table-and-an-intermediate-table-followers-and-fan-list-follower-be-not-if-not-how-do-i-connect-them
也就是说动态属性访问关联模型返回的是 Eloquent：集合，而如果我们直接调用方法返回的则是 数据库请求构建器（也就是查询构造器？）。

laravel集合
主要是为了链式调用函数来处理数组元素，他和数组类似，但并不是数组；
所有 Eloquent 的集合都继承了 Laravel Collection 对象；因此，他们也继承了所有集合基类提供的强大的方法；
注意：大多数 Eloquent 集合方法会返回新的 Eloquent 集合实例，但是 pluck, keys, zip, collapse, flatten 和 flip 方法除外，它们会返回一个 集合基类 实例。同样，如果 map 操作返回的集合不包括任何 Eloquent 模型，那么它会被自动转换成集合基类

预加载和懒加载
加载是针对内存来说的
https://learnku.com/docs/laravel/7.x/eloquent-relationships/7500#eager-loading

trait怎么使用
先在类的上面用 use trait的完全限定名称
然后，在类里面用  use trait非完全限定名称 

??     当 expr1 为 null，表达式 (expr1) ?? (expr2) 等同于 expr2，否则为 expr1

可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 true 时返回 expr1，否则返回 expr3。

insteadof

【77】钩子 hook
https://blog.csdn.net/wanglitaow/article/details/52598750

【78】路由的命名最好和视图路径相对应（我自己是这么认为的）

【79】diffForHumans()把日期进行转化，转化后类似这样   "17年前"
Carbon 是 PHP 知名的日期和时间操作扩展，Laravel 框架中使用此扩展来处理时间、日期相关的操作。diffForHumans 是 Carbon 对象提供的方法，提供了可读性越佳的日期展示形式。

【80】预加载load()和with()区别：它们的结果是一样的，只不过load把查询分为两步执行（意思就是有多条查询，把这些多条查询分成两份来分步执行），with直接全部执行
https://www.cnblogs.com/cjjjj/p/9839725.html
---------------------larabbs项目-----------------------------
----Font Awesome 提供了可缩放的矢量图标，允许我们使用 CSS 所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果
【81】我们把所有的『自定义辅助函数』存放于 app/helpers.php 文件中

【82】Linux 的 touch touch 命令有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件

【83】<meta name="csrf-token" content="{{ csrf_token() }}">
csrf-token 标签是为了方便前端的 JavaScript 脚本获取 CSRF 令牌

【84】Laravel 提供的本地化特性，使用 __() 函数来辅助实现。按照约定，本地化文件存储在 resources/lang 文件夹中，为 JSON 格式。

【85】我们将以第三方扩展包 mews/captcha 作为基础来实现 Laravel 中的验证码功能
安装命令
composer require "mews/captcha:~3.0"

【86】如果不想受 fillable 或者 guarded 等的影响，还可以使用 forceFill(array $attributes) 强制来批量赋值

【87】使用Intervention/image 扩展包来处理图片裁切的逻辑
composer require intervention/image

【88】语义化版本定义
https://learnku.com/courses/laravel-intermediate-training/7.x/improve-performance/9029

【89】安装 Debugbar
https://learnku.com/courses/laravel-intermediate-training/7.x/improve-performance/9029