#【1】Laravel 提供的三种访问类的方式
依赖注入：通过类型提示的方式实现自动依赖注入

门面：通过代理来访问类

辅助函数：通过方法的方式来访问类
https://segmentfault.com/a/1190000009171779?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly

#【2】依赖注入，控制反转
https://insp.top/article/learn-laravel-container

#【3】魔术方法：可以理解为比较神奇的方法，这些方法比一般的方法要神奇很多，具体怎么神奇，就看个人理解了
https://segmentfault.com/a/1190000007250604
https://www.php.net/manual/zh/language.oop5.magic.php

#【4】反射api：---以后再看

#【5】中间件的逻辑：每个请求都要经过中间件处理，有两种结果，通过或者不通过，中间件要放在控制器构造函数中

#【6】boot方法一般是静态的，类的初始化一般是放在__construct函数中，boot方法的执行一般在类的初始化之后

#【7】php artisan make:migration create_tatuses_table --create=aaaa
这个命令会创建一个类名为CreateTatusesTable的迁移文件，迁移文件会创建一个名称为aaaa的数据表，不加--create=aaaa，表名默认取的是tatuses

#【8】snake case蛇形命名法，就是用下划线e.x file_name
camel case驼峰命名法，就是第一个字母小写，剩下其他单词的第一个字母大写e.x fileNameName2

#【9】命名空间都是用的反斜杠

#【10】用户认证就是指通过Auth::attempt()来验证用户传给服务端的数据
已认证用户，就是指通过这个方法返回true的用户
attempt 方法的每个参数是一个关联数组。数组值用于在数据库中查找用户。在上面的例子中，将通过 email 列的值查找用户。如果找到该用户，将用存储在数据库中的哈希密码与数组中的 password 值做比较。不需要对 password 做哈希运算，框架在与数据库中的哈希密码做比较前自动对此值做哈希运算。如果两个哈希值匹配，将为该用户建立验证通过的 session。
如果验证成功， attempt 方法返回 true ，否则返回 false
在attempt方法里面不用再调用Auth::login()；
----因为attempt通过后会自动建立登录session会话

#【11】Auth::login($user);
给一个用户实例创建登录session

#【12】redirect() 带参数会返回 重定向 HTTP 响应，如果不带参数调用则返回重定向器实例

#【13】请求中放的值的键都是前端name属性中的值

#【14】belongsToMany是多对多关联
可以接受四个参数，
第一个是关联模型名，
第二个是中间表表名
第三个是定义关联的所在模型在中间表的外键名（这个外键是逻辑上的，并不一定要是外键）
第四个是关联模型在中间表的外键名
这个模型其实不需要中间表，只要逻辑是有三个表就可以
belongsToMany(User::class, 'followers', 'user_id', 'follower_id')
----如果不指定第二个参数，Eloquent 会默认中间表为按照字母顺序连接两个关联模型的名字


#【15】$user->followings和$user->followings()的区别
ps:follonwings是定义在模型中的关联方法
https://learnku.com/laravel/t/8035/should-there-be-three-tables-for-many-to-many-relationships-how-can-a-users-table-and-an-intermediate-table-followers-and-fan-list-follower-be-not-if-not-how-do-i-connect-them
也就是说动态属性访问关联模型返回的是 Eloquent：集合，而如果我们直接调用方法返回的则是 数据库请求构建器（也就是查询构造器？）。

#【16】laravel集合
主要是为了链式调用函数来处理数组元素，他和数组类似，但并不是数组它是类；
所有 Eloquent 的集合都继承了 Laravel Collection 对象；因此，他们也继承了所有集合基类提供的强大的方法；
----注意：大多数 Eloquent 集合方法会返回新的 Eloquent 集合实例，但是 pluck, keys, zip, collapse, flatten 和 flip 方法除外，它们会返回一个 集合基类 实例。
同样，如果 map 操作返回的集合不包括任何 Eloquent 模型，那么它会被自动转换成集合基类

#【17】预加载和懒加载
加载是针对内存来说的
https://learnku.com/docs/laravel/7.x/eloquent-relationships/7500#eager-loading

#【18】trait怎么使用
先在类的上面用 use trait的完全限定名称
然后，在类里面用  use trait非完全限定名称 
trait也可以像上面那样使用，trait也可以调用trait
----优先顺序是来自当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法

#【19】??     当 expr1 为 null，表达式 (expr1) ?? (expr2) 等同于 expr2，否则为 expr1

#【20】可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 true 时返回 expr1，否则返回 expr3。

#【21】insteadof
为了解决多个 trait 在同一个类中的命名冲突，需要使用 insteadof 操作符来明确指定使用冲突方法中的哪一个
e.x  
 use A, B{
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
意思是使用B中的smallTalk函数，放弃A中的这个函数，下面那个一样

#【22】{}  双引号引起来的大括号中的变量，是按变量来解析的，并不是字符串
e.x $var = 'name';   $boo = "x{$var}" 
$boo为 xname
----只有双引号才会解析变量，单引号不会解析变量

#【23】接口和抽象类主要区别
一个类可以实现多个接口，而一个类只能继承一个抽象类！

#【24】抽象类
继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）
----类中必须实现接口中定义的所有方法，否则会报一个致命错误

#【25】定义常量
你可以用 define() 函数，或 const 两种方法来定义一个常量
常量不用加美元符号
https://www.php.net/manual/zh/language.constants.syntax.php

#【26】类中的静态方法和属性，主要作用就是可以不实例化，直接调用

#【27】当以属性方式（指动态属性，如$user->followings（followings是模型中定义的关联方法））访问 Eloquent 关联时，关联数据「懒加载」
这时就要使用预加载来解决关联模型查询时出现的N+1问题
就是调用模型的静态方法with，e.x  User::with('followings')
ps:followings是模型中定义的关联方法

#【28】每个 Eloquent 模型都相当一个查询构造器，查询构造器实例可以调用诸如get(),where()，pluck()等函数
----模型类可以静态调用where等函数，然后再调用get函数获取结果

#【29】Eloquent 返回的所有结果集都是 Illuminate\Database\Eloquent\Collection 对象的实例包括通过 get 方法检索或通过访问关联关系(这里应该是指通过动态属性返回的)获取到的结果

#【30】Eloquent其实就是模型，每个数据库表都有一个对应的「模型」用来与该表交互

#【31】html  form中get和post区别
get       form默认该方法。将表单数据（form-data）以名称/值对的形式附加到 URL 中：URL?name=value&name=value。
post     以 HTTP post 事务（事务，在这里可以理解成sql语句）的形式发送表单数据（form-data）。

#【32】 Memcached 和 Redis   都是后端缓存驱动

【33】抽空总结下laravel启动过程
https://learnku.com/docs/laravel/7.x/lifecycle/7453
https://blog.csdn.net/yu_20170610/article/details/104903479

#【34】初始化就是指给变量赋值，类的初始化也是如此，只不过类的初始化，有时候会放在类的构造函数中

【35】事件分发  你可以将事件实例传递给 event 辅助函数。该辅助函数将会把事件分发到所有该事件已注册的监听器上，event 辅助函数可以全局使用
e.x  event(new OrderShipped($order))   $order是模型实例

【36】上面的例子中事件都会保存模型实例为自己的属性，然后监听器会通过在handle函数中传递一个对应事件的类型提示参数，然后这个参数会在一堆实例中，通过反射来找到对应的类

【37】模型事件的三种实现方法
1.在模型中使用 $dispatchesEvents 属性去注册事件对象
e.x
protected $dispatchesEvents = [
    'saving' => \App\Events\UserSaving::class,
];


#【38】instanceof用于确定一个变量是不是某个类或者实现了某个接口的类的实例

#【39】模型中update和save的区别
update是批量赋值，并未实际生成模型实例，不会触发模型事件
save会触发模型事件saved
----文档中所说的检索模型意思就是检出模型，就是创建一个或多个模型实例

#【40】若要获取上一次请求所保存的旧数据，可以在 Request 的实例上使用 old 方法
e.x  $username = $request->old('username');
也可以使用Laravel 提供的全局辅助函数 old（其实这个函数里面调用的还是request->old('parameter')）
e.x  <input type="text" name="username" value="{{ old('username') }}">
----这个方法可以有第二个参数，用来作为默认值，就是打开编辑页面的输入框里面的值

【41】所有服务提供者都是通过配置文件 config/app.php 进行注册
放在providers中，第一步，所有服务提供者的 register 方法会被调用，然后一旦所有服务提供者均注册后， boot 方法才被调用

#【42】三种解析类实例的方法，
一个是$this->app->make(类的完全限定名)(在服务提供者中，你总是可以通过 $this->app 属性访问容器)
另一个是全局辅助函数resolve(类的完全限定名)，这个函数内部是封装了app函数
最后一个是通过全局辅助函数app(类的完全限定名)

【43】config/app.php文件中的别名
别名是懒加载，不会影响性能

#【44】关于绑定和解析的理解
app()->bind('rice', function (){
    return new \App\Rice();
});
----绑定还有另外一种方式，就是把两个类绑定起来，e.x bind(User::class, Data::class)
把‘rice’绑定到一个闭包，这个闭包会返回一个类的实例
Route::get('eat', function() {
       
       return app()->make('rice')->food(); 
       // 或者 return resolve('rice')->food()；

});
然后通过make函数传递一个键名来调用这个闭包，就生成了一个类的实例

#【45】Facade的实现方式，
----原类要先绑定到容器中
首先定义一个类，这个类要继承Facade类，类的命名可以是原类名+Facade，然后在getFacadeAccessor()（static方法）方法中返回原类在容器中注册的键名
，这样就可以了，一般还会再为原类名+Facade定义一个别名，这样就可以
use+别名来引用了，不过上面创建的门面并不会自动创建别名
然后当调用门面的不存在的静态方法是，先是会调用一个__callStatic魔术方法,然后__callStatic()这个魔术方法中会间接调用getFacadeAccessor()方法，这个方法仅仅返回一个容器中的一个键名，然后返回给容器来解析，然后容器就返回键名对应的实例，然后实例调用自己的和上面门面调用的静态方法同名的非静态方法

【46】类的依赖不一定是类，可以是任何数据类型

#【47】自动依赖注入：现在只知道是通过反射来实现的，具体怎么实现不知道，在laravel中是通过类型提示来是使用自动依赖注入

【48】重定向在哪里修改
一般要想改重定向的话，是在对应的控制器上，重写protected $redirectTo属性就行

【49】控制反转是一种解决问题的思路，而依赖注入就是这种思路的具体实现

#【50】
--简单绑定$this->app->bind(),参数是什么
--绑定一个单例$this->app->singleton(),这个的意思是只解析一次，后续的对它的解析都将返回第一次解析的实例，参数是什么
--绑定实例$this->app->instance(),参数是什么
--绑定基本值    这个应该很少用，就是给类传参数用的
--绑定接口到实现$this->app->bind(),参数是什么
e.x
$this->app->bind(
    'App\Contracts\EventPusher',
    'App\Services\RedisEventPusher'
);
这个是指当一个类需要一个EventPusher的实现时，应该注入 RedisEventPushe
（这个是指通过类型提示传参时，如果用的是EventPusher类型提示，那么就注入RedisEventPusher依赖）
--上下文绑定  这个就是指当多个类都使用了同一个接口（例如通过接口类型提示传参），但是每个类都要求注入这个接口的不同实现，此时就用这个
--标记   $this->app->tag(['SpeedReport', 'MemoryReport'], 'reports');
就是指‘打包’，把类似的注册，归为一类；具体用在哪里不知道，['SpeedReport', 'MemoryReport']这两个就是通过bind注册的类，把他们归为reports
--扩展绑定$this->app->extend()
extend 方法可以修改已解析的服务。比如，当一个服务被解析后，你可以添加额外的代码来修饰或者配置它。 
extend 方法接受一个闭包，该闭包唯一的参数就是这个服务， 并返回修改过的服务

#【51】中间件除了过滤请求的作用外，还有重定向的功能，不通过会被重定向到另一个页面

#【52】命名空间的三种方式，重点
https://www.php.cn/blog/detail/26466.html
https://www.php.net/manual/zh/language.namespaces.basics.php
#【53】require和include区别
假如a.php文件中有return；b.php文件中没有return
然后
$a = include 'a.php';
$b = include 'b.php';
那么$a,$b的值分别为什么
return的数据；如果include成功，那么$b=1，如果失败，$b=0
https://www.php.net/manual/zh/function.include.php

#【54】中间件是在请求之前或之后执行，取决于中间件本身，是怎么实现的？
https://learnku.com/docs/laravel/7.x/middleware/7459

【55】Laravel 的入口文件是哪个，这个文件主要是来干什么用的
public\index.php 这个文件会先加载vender/autoload.php，autoload.php文件主要负责类的自动加载的，然后从 bootstrap/app.php 脚本中检索 Laravel 应用程序的实例。
----Application 类继承自 Container 类，所以创建的应用实例可以使用容器的方法，同时app实例是唯一的
https://zhuanlan.zhihu.com/p/61729937


【56】有两个注册ServiceProvider和别名的地方
一个是config/app.php文件的providers和aliases
另一个是composer.json中的extra->laravel->providers
和extra->laravel->aliases


【57】当文件中同时出现__autoload和spl_autoload_register时，以spl_autoload_register为准
----__autoload自 PHP 7.2.0 起被废弃，并自 PHP 8.0.0 起被移除

【58】__autoload和spl_autoload_register的区别
https://learnku.com/articles/4681/analysis-of-the-principle-of-php-automatic-loading-function

【59】栈和堆的区别
----栈和堆都是内存的一部分，它们只不过是不同的逻辑结构
 栈（stack）：有编译器自动分配和释放，存放函数的参数、局部变量、临时变量、函数返回地址等；

 堆（heap）：一般有程序员分配和释放，如果没有手动释放，在程序结束时可能由操作系统自动释放

【60】spl_autoload_register ()
ps:spl是一组接口；
这个函数主要作用就是把它的参数(一般是一个函数回调)，写入到堆栈中，然后当调用的类名在当前文件中未定义时，会调用这个堆栈，依次执行堆栈中的函数
----这个回调函数有一个参数，我们传给它的就是类的完全限定名
----回调函数的原理大致是这样的：
根据类名确定类文件名（需要约定映射规则）
确定类的具体路径（需要约定映射规则）
加载类（include() 或 require() 的实现）

如果我们不向这个函数输入任何参数，那么就会注册 spl_autoload () 函数

spl_autoload 就是 SPL 自己的定义 _autoload () 函数，功能很简单，就是去注册的目录 (由 set_include_path 设置) 找与 classname 同名的 .php/.inc 文件
----有两种传参方式，一种是传一个函数名称（用引号引起来）
另一种是传一个数组，数组第一个值是类名，第二个值是类中的函数名
e.x     [$this, 'foo'] or ['ClassName', 'foo']



【61】__NAMESPACE__ 魔术常量和 namespace 关键字区别
__NAMESPACE__ 就是常量，和变量的用法一样，它的值是一个字符串
namespace不能当常量用，他有俩个用法，一个是定义命名空间时，一个是当前命名空间的关键字使用，e.x namespace\Subnamespace

【62】PSR-4    命名空间规范
https://www.kancloud.cn/thinkphp/php-fig-psr/3144
--完全限定的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个leading namespace和子命名空间，作为“命名空间前缀”，其必须与至少一个“文件基目录”相对应
--“ namespace prefix”后面的连续子名称空间名称对应于“ base directory”中的子目录，其中名称空间分隔符表示目录分隔符。子目录名称必须与子命名空间名称的大小写相匹配
--namespace prefix（命名空间前缀）
--leading namespace(应该是指顶级命名空间？?)
--base directory是人为定义的，名字可以任意取，可以是多层的文件路径
e.x
完全类名\Aura\Web\Response\Status	
命名空间前缀Aura\Web	
文件基路径/path/to/aura-web/src/	
文件路径/path/to/aura-web/src/Response/Status.php

【63】如果没有参数要传递给类的构造函数，创建实例时类名后的括号则可以省略掉

【64】后期静态绑定
https://learnku.com/articles/8964/understanding-of-static-binding-at-the-later-stage-of-php
看下自己的评论

#【65】use其实导入的并不是关于类的定义代码，而是这个类的完全限定名称
当需要用到这个类时，它会在当前文件中查找这个完全限定名称的类

【66】全局空间就是最顶层的空间，它是所有命名空间的顶部，一般用反斜杠表示e.x  '\'

【67】如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间

【68】如果定义了命名空间，假如是namespace Kakaxi;
若在此命名空间中用限定类名调用一个类，比如 Cname::test();
那么这个类会解析为\Kakaxi\Cname

【69】假如给类起一个别名，e.g. \App\Kaa\Cname   alias as Cname
那么在没有定义命名空间时，就可以不用use直接用Cname来调用这个类（require动态加载）
如果，定义了命名空间，那么就要用use Cname来引入这个类

【70】当我们执行git push没有指定分支时，自动使用当前分支，而不是报错。
git config --global push.default simple

【71】git 中的origin代表什么意思
origin指向的是一个远程仓库，远程仓库就是一个链接e.x https://github.com/user1/repository.git
origin可以理解为 远程仓库链接的别名，链接太长用起来麻烦
origin在git remote add 作用是定义 origin的映射

【72】$this和self的区别
大体上没什么区别
$this不能放在静态方法中，self可以；（可能是因为静态方法主要是给类调用的，你不能通过一个类去调用这个类的实例）

【73】转发调用指的是三个静态调用和两个函数；非转发调用指的是静态调用或者非静态调用；
----通过$this的调用属于非转发调用；$this指向的是实例化的那个类，不是定义它的那个类
https://www.php.net/manual/zh/language.oop5.late-static-bindings.php
----self，parent，static都可以通过双引号调用非静态属性和方法

【74】xss防御
1.使用HTMLpurifier来进行过滤用户提交的数据
先设置白名单，然后调用clean函数处理，不存在白名单中的元素和属性都会被过滤掉
2.web页面用htmlspecialchars()函数输出数据
若数据库存的是  <script>alert('存在 XSS 安全威胁！')</script>
那么用{{}}不会弹窗，页面显示的也是这个内容<script>alert('存在 XSS 安全威胁！')</script>
如果用{!! !!}来显示，那么<script>alert('存在 XSS 安全威胁！')</script>；会被当作html代码，页面就会弹窗警告
总结就是，{{ }}会对内容进行转换，比如<会被装换为&lt，&lt在html中相当于一个特殊符号<，类似于asciicode码
而{!! !!}表示不对内容进行转换
https://learnku.com/courses/laravel-intermediate-training/7.x/safety-problem/9038

【75】CSRF防御
加上token，laravel中一般用@csrf或者{{ csrf_token() }}

【76】blade指令的（）中不用使用{{ }}，{{ }}只用在html标签中

【77】查询作用域
https://learnku.com/docs/laravel/6.x/eloquent/5176#local-scopes
--全局作用域（意思就是给模型里面的所有查询都加上限制条件）
有两种实现方法
1.通过类实现接口来实现
首先定义一个类实现这个接口Illuminate\Database\Eloquent\Scope
然后在类的apply方法中加入类似以下语句
$builder->where('age',  '>',  200);
应用全局作用域的方法是，在模型的boot方法中加上static::addGlobalScope(new 上面定义的作用域类);
2.通过匿名全局作用域来实现
直接在模型的boot函数中加入一下类似代码
static::addGlobalScope('age', function (Builder $builder) {
            $builder->where('age', '>', 200);
        });
--本地作用域（这个解释为局部作用域更合适）
只需要在对应的 Eloquent 模型方法前添加 scope 前缀
不过，在调用这些方法时不必包含 scope 前缀
使用的话就是类似查询构造器的使用方法，可以链式调用
e.x   scopeAaa()调用的时候就是aaa()，要变为小写，就是去掉scope后再采用单驼峰的写法
--动态作用域（这个是应用在本地作用域的）
有时可能地希望定义一个可以接受参数的作用域。把额外参数传递给作用域就可以达到此目的。作用域参数要放在 $query 参数之后（指形参）

【78】控制器方法的传参是先从路由uri中找，若没找到再从url中的参数中找
----这个应该是错的

【79】查询构造器中各种条件的限制操作都是可以互换位置的
https://learnku.com/laravel/t/18518

【80】php三个点的作用(...)
1.作为形参使用，表示可变数量的参数列表
2.作为实参使用，表示把数组中的元素拆分为一个个单独的参数传递
https://www.php.net/manual/zh/functions.arguments.php#functions.variable-arg-list

【81】前端表单提交按钮怎么加上一个确认提示
在表单属性中加上onsubmit事件
e.x   onsubmit="return confirm('您确定好了吗？');"
在form表单中，当你点击提交的时候，先回执行onsubmit事件 如果返回的是false，那就不会执行action，只有返回的值为true时，才会继续执行
window对象的confirm()方法，用于显示一个带有指定消息和确认及取消按钮的对话框。
如果访问者点击"确定"，此方法返回true，否则返回false。
https://www.runoob.com/jsref/event-onsubmit.html
https://www.runoob.com/jsref/met-win-confirm.html

【82】mkdir -p
-p表示递归创建

【83】laravel文档中的参数$post指的是HTTP 请求

【84】array_merge和数组+的大致区别https://learnku.com/articles/26199
1）若键名为字符串，那么对于同名键array_merge会拿传参后面的替换前面的值；而数组+会拿最前面的数组替换掉后面的同名键的值
2） 若键名为数字，那么对于同名键array_merge不做处理，全部保存下来
；而数组+会拿最前面的数组替换掉后面的同名键的值

【85】中间件
1）全局中间件
对所有HTTP请求都做处理
2）路由中间件
需要在路由或者控制器上指定要使用哪个路由中间件
3）中间件组
就是让一个键对应多个中间件，调用这个键就可以调用多个中间件
----RouteServiceProvider 默认将 web 中间件组自动应用到 routes/web.php
4）还有一个比较特殊的，就是Kernel基类中的属性middlewarePriority
这里面定义的中间件执行顺序，前面三种中间件都会按这个顺序执行

【86】中间件参数
首先要在中间件的handle方法中加入要传递的形参，放在最右边
然后定义路由时通过一个 : 来隔开中间件名称和参数来指定中间件参数。多个参数就使用逗号分隔
e.x  Route::put()->middleware('role:parameter1, parameter2');

【87】html中href属性和src属性有两种表示方式
1）绝对 URL - 指向另一个网站（比如 href="http://www.example.com/theme.css"）
2）相对 URL - 指向网站内的一个文件（比如 href="/themes/theme.css"）
https://www.runoob.com/tags/att-link-href.html

【88】注册事件的两种方式
1）通过 EventServiceProvider 的 $listen 数组来注册的
2) 通过 EventServiceProvider 的 boot 方法中手动的注册基于闭包的事件
e.x Event::listen

【89】事件的自动发现机制默认是关闭的

【90】php 语言的类型转换
e.x (array) $foo意思就是把$foo转换为数组

【91】把一个闭包赋值为一个变量后，就可以通过 变量名($parameter)这种方式来调用闭包，就像调用普通函数一样

【92】注册事件的监听时，如果类已存在就用类名，如果类未存在就用类要存放的文件路径的字符串，例如要生成的文件是这样的App\Events\OrderShipped.php，就用下面的方式注册
e.x  protected $listen = [
    'App\Events\OrderShipped' => [
        'App\Listeners\SendShipmentNotification',
    ],
];

【93】<script>标签中的type属性
在 HTML5 中，type 属性不再是必需的。默认值是 "text/javascript"
----在html中引入javascript有两种方式，
一种是直接在标签内容中添加js代码，
另一种是通过src属性指定要执行的js文件
----<script>的位置可以放在 HTML 页面的 <body> 或 <head> 部分中
----js语句后面的分号是可以不加的，但是建议加上，以用来增加代码可读性

【94】把子查询放在条件语句中 和 把子查询当作子表所花费的查询时间大体是一样的

【95】php中的foreach 仅能够应用于数组和对象
应用于对象时，默认情况下，所有可见属性都将被用于遍历
----php中可见属性有三种
public（在任何地方都可以访问）
protected（尽在类自身和其子类以及父类中，才能被访问，ps：类的实例无法访问）
private(仅在本类中可以被访问，ps：类的实例无法访问)

【96】在C语言中指针的值是内存地址
ps：指针只是一种概念，任何语言只要实现了这个概念，就可以说它有指针，只是名字不同而已

【97】php中的引用
1）它不同于c语言中的指针，但是又有点类似，引用的值并不是内存地址
2）引用一般用在三个地方，1.引用赋值 2.传引用 3.引用返回
https://www.php.net/manual/zh/language.references.whatdo.php#language.references.whatdo.pass
3）php中的引用要慎用

【98】php中所有变量都存储在名为zval的容器中
https://www.php.net/manual/zh/features.gc.refcounting-basics.php

【99】PHP写时复制（Copy On Write）
PHP 在修改一个变量以前，会首先查看这个变量的 refcount，如果 refcount 大于1，PHP 就会执行一个分离的例程， 对于上面的代码，当执行到第三行的时候，PHP 发现 $var 指向的 zval 的 refcount 大于1，那么 PHP 就会复制一个新的 zval 出来，将原 zval 的 refcount 减 1，并修改 symbol_table，使得 $var 和 $var_dup 分离(Separation)。这个机制就是所谓的 copy on write(写时复制)

在 用变量对变量 进行赋值时，这些相同值的变量指向同一块内存，只有当这些指向同一块内存的 相同值的变量 中的某一个变量的值 发生改变的时候，才需要进行变量分离，即：将 值发生改变的变量分离出来（PHP内核将这块内存复制一份，并更新其值）

【100】new创建实例时，赋值给变量a，a这时的refcount是1；但是is_ref是0，a的值是实例的标识符（这个标识符指向内存地址）；
当执行$b = &$a这个操作时，变量a，b的is_ref都变为1，它不会被引用计数回收，php7之后is_long, is_double，IS_NULL，IS_FALSE，IS_TRUE的引用计数都是0；php7之后，refcount__gc表示引用数量

【101】在任何语言中，都会生成一张符号表，符号表中变量名对应的是值的地址
----php中的引用其实就是别名，比如，有一个人有三个名字，小名叫 张1，身份证上的名字 叫张2，外号叫 张3；那么如果给张3一个苹果，那么也就是说，张1，张2，张3都有一个苹果，因为它们对应的都是同一个人
----类似unix的文件硬链接，首先，系统找到这个文件名对应的inode号码；其次，通过inode号 码，获取inode信息；最后，根据inode信息（inode中有文件数据block的位置，也就是在磁盘上的位置），找到文件数据所在的block，读出数据
https://www.cnblogs.com/1995hxt/p/5879539.html
----最重要的一点是引用和指针的区别
https://blog.csdn.net/smartgps2008/article/details/90648015

【102】php中创建引用是用 $i = &$foo;
C++中创建引用 int i = 1; int& r=i;
C++中创建指针 int  var = 20;  int  *ip;   ip = &var;
php中一般的变量都是通过符号表和内存地址相关联的，但是如果为某个变量起了一个别名（即引用），a是b的别名，那么这时a,b的is_ref都变为true，a和b此时在符号表中对应的是相同的内存地址；

php的写时复制，当进行变量的赋值操作时，e.x $a = $b;这时，a，b在符号表中都指向同一个内存地址，但这时a并不是b的别名（a,b的is_ref都是0），对a，b中任一个做改动时，才会触发复制操——为a分配一个内存地址，也就是a,b是互不影响的。
php中的别名更像是定义的一种规则，就是系统通过变量的is_ref字段来判断变量是否为别名，若是别名，系统就按别名的规则处理——若b，c是a的别名，那么a，b，c共用一个内存地址&&（同时）对这三个变量中任一个修改，都会影响其他两个的值；
虽然变量赋值也是共享同一个内存地址，但是却少了这句话：（同时）对这三个变量中任一个修改，都会影响其他两个的值；因为变量赋值后的变量的is_ref是0，也就是说系统并未把它标记为别名

【103】为什么要使用::class，而不直接使用类的完全限定名称字符串
对ide友好，如果修改了类名，ide中就会显示这个类名为黄色，表示这个类名不存在；字符串的话就不会显示了

【104】禁用所有模型事件
User::withoutEvents(闭包），在闭包中的任何代码都不会触发模型事件

【105】保存模型时，不会触发任何事件
用$user->saveQuietly();

【106】dirname函数：获取出去文件名的目录名
basename函数：返回路径中的文件名部分

【107】关于composer.json文件中自动加载的定义
psr-4中定义了命名空间前缀和对应的文件基目录
命名空间前缀必须以\\结束，要不然Foo和FooBar会被当成是相同的命名空间
https://docs.phpcomposer.com/04-schema.html#autoload

【108】$GLOBALS
一个包含了全部变量的全局组合数组。变量的名字就是数组的键。
https://www.php.net/manual/zh/reserved.variables.globals.php

【109】=和=&的区别
To summarize, =, replaces the 'destination's value; =&, changes the destination.
= 替换目的地里面存放的值，=&改变目的地

【110】composer dump-autoload -o
-o这个参数一般只在生产环境使用

【111】一般容器不能解析类实例（没有将接口与具体类进行绑定操作）就会报Uncaught ReflectionException
这个时候，一般解决方法是执行 composer dump-autoload

【112】Undefined variable
这种错误一般是因为控制器方法少传了参数

【113】用 Redis 节流
Redis 管理速率限制方面更有效
https://learnku.com/docs/laravel/8.x/routing/9365#c52f15

【114】redirect函数的第二个参数，是要返回的http状态码,默认返回302